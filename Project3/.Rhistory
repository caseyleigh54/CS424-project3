})
#res <- get_current_forecast(41.870, -87.647)
# res2 <- aq_latest(country = "US", city = "Chicago-Naperville-Joliet")
output$mymap <- renderLeaflet({
req(input$Maps)
req(pollutantPaths)
## print("hello")
ds <- nodeLocations()  #displays only the current nodes with information (last 1 hour)
##  print(nodeLocations())
leaflet(ds) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron, group = "Default Maptile") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "Dark Maptile") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite Maptile") %>%
addProviderTiles(providers$Hydda, group = "Hydda Maptilte") %>%    #Change this to change the different map background types
addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)%>%
addLayersControl(position = "bottomleft", baseGroups = c("Default Maptile", "Dark Maptile", "Satellite Maptile", "Hydda Maptilte"), options = layersControlOptions(collapsed = FALSE))
# if(input$Maps == "Default"){
#   leaflet(ds) %>%
#     addTiles() %>%  # Add default OpenStreetMap map tiles
#     #addProviderTiles(providers$Hydda) %>%    #Change this to change the different map background types
#     addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)
#
# }
#  else if(input$Maps == "Map 1"){
#   leaflet(ds) %>%
#     addTiles() %>%  # Add default OpenStreetMap map tiles
#     addProviderTiles(providers$Hydda) %>%    #Change this to change the different map background types
#     addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)
#
# }
#
# else if(input$Maps == "Map 2"){
#   leaflet(ds) %>%
#     addTiles() %>%  # Add default OpenStreetMap map tiles
#     addProviderTiles(providers$Stamen.TopOSMRelief) %>%    #Change this to change the different map background types
#     addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)
#
# }
#   else if(input$Maps == "Map 2"){
#     leaflet(ds) %>%
#       addTiles() %>%  # Add default OpenStreetMap map tiles
#       addProviderTiles(providers$Stamen.TonerHybrid) %>%    #Change this to change the different map background types
#       addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)
#
#   }
#
#
#   else if(input$Maps == "Map 3"){
#     leaflet(ds) %>%
#       addTiles() %>%  # Add default OpenStreetMap map tiles
#       addProviderTiles(providers$Stamen) %>%    #Change this to change the different map background types
#       addMarkers(~Lat, ~Lon, popup = ~as.character(address), label = ~as.character(vsn), layerId = ~vsn)
#
#   }
#
})
observeEvent(input$mymap_marker_click, {
p <- input$mymap_marker_click
output$node_data <- renderPlot({
req(no2_IsSelected)
req(co_IsSelected)
req(ozone_IsSelected)
req(so2_IsSelected)
req(pm10_IsSelected)
req(pm25_IsSelected)
req(h2s_IsSelected)
req(tempertature_IsSelected)
req(humidity_IsSelected)
req(intensity_IsSelected)
req(input$units)
req(input$TimeFrame)
day = 0
hour = 0
if(input$TimeFrame == "Current"){
day = 0
hour = 1
}else if(input$TimeFrame == "24 Hours"){
## print(input$TimeFrame)
day = 1
hour = 0
}else if(input$TimeFrame == "7 Days"){
day = 7
hour = 0
}
no2_data <- getData(p$id, day,hour, no2_path)
co_data <- getData(p$id, day,hour, co_path)
h2s_data <- getData(p$id, day,hour, h2s_path)
so2_data <- getData(p$id, day,hour, so2_path)
pm10_data <- getData(p$id, day,hour, pm10_path)
pm25_data <- getData(p$id, day,hour, pm25_path)
temperature_data <- getData(p$id, day,hour, temperature_path)
humidity_data <- getData(p$id, day,hour, humidity_path)
intensity_data <- getData(p$id, day,hour, intensity_path)
if(length(no2_data) == 0 & length(co_data)== 0 & length(h2s_data)== 0 & length(so2_data)== 0 & length(pm10_data)== 0 & length(pm25_data)== 0){
stop(paste("No data avaliavle for node: "),input$node1Input)
}
else{
no2_data $timestamp <- as.POSIXct(no2_data $timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- ggplot() +
geom_line(data=no2_data , aes(timestamp, value, group=1, color="NO2"))
if(length(co_data) > 0 ){
co_data$timestamp <- as.POSIXct(co_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=co_data, aes(timestamp, value, group=1, color="CO"))
}
if(length(h2s_data) > 0){
h2s_data$timestamp <- as.POSIXct(h2s_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=h2s_data, aes(timestamp, value, group=1, color="H2S"))
}
if(length(so2_data) > 0){
so2_data$timestamp <- as.POSIXct(so2_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=so2_data, aes(timestamp, value, group=1, color="SO2"))
}
if(length(pm10_data) > 0){
pm10_data$timestamp <- as.POSIXct(pm10_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=pm10_data, aes(timestamp, value, group=1, color="PM10"))
}
if(input$units == "met"){
if(length(temperature_data) > 0){
temperature_data$timestamp <- as.POSIXct(temperature_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=temperature_data, aes(timestamp, value, group=1, color="Temperature"))
}
}
else if(input$units == "imp"){
if(length(temperature_data) > 0){
temperature_data$TempM <- temperature_data[,'value']*9/5+32
temperature_data$timestamp <- as.POSIXct(temperature_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=temperature_data, aes(timestamp, TempM, group=1, color="Temperature"))
}
}
if(length(humidity_data) > 0){
humidity_data$timestamp <- as.POSIXct(humidity_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=humidity_data, aes(timestamp, value, group=1, color="Humidity"))
}
if(length(intensity_data) > 0){
intensity_data$timestamp <- as.POSIXct(intensity_data$timestamp, tz="UTC", "%Y-%m-%dT%H:%M")
myplot <- myplot + geom_line(data=intensity_data, aes(timestamp, value, group=1, color="Intensity"))
}
myplot <- myplot + geom_point() + scale_colour_manual(values=c("red", "green", "blue", "purple", "orange", "yellow", "grey"))
myplot
}
})
})
###### COMPLETED CODE DONT TOUCH######
##### Data tables for node comparisons #######
output$NO2_1 <-  DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, no2_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$OZONE_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, ozone_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$CO_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, co_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$H2S_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, h2s_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$SO2_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, so2_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$PM10_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, pm10_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$PM25_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, pm25_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$TEMPERATURE_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, temperature_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$HUMIDITY_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, humidity_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$INTENSITY_1 <- DT::renderDataTable(
DT::datatable({
req(input$node1Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, intensity_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
########################### second node
output$NO2_2 <-  DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, no2_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$OZONE_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, ozone_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$CO_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, co_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$H2S_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, h2s_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$SO2_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, so2_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$PM10_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, pm10_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$PM25_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, pm25_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE )))
output$TEMPERATURE_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, temperature_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$HUMIDITY_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, humidity_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
output$INTENSITY_2 <- DT::renderDataTable(
DT::datatable({
req(input$node2Input)
req(input$TimeFrame)
getPollutantData(input$node1Input, input$TimeFrame, intensity_path)
},options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE, width = 200 )))
}
# Define UI for application that draws a histogram
ui <- dashboardPage(
################################################################################ THE COLOR AND LENGTH OF THE TITLE FOR THE SIDEBAR ################################################################################
skin = "yellow",
dashboardHeader(title = "CS 424 PROJECT 3-Group 2", titleWidth = 350 ),
######################################## CREATE DROP DOWN MENUS IN SIDEBAR + NEW TAB CONTAINING RESOURCES ########################################
dashboardSidebar(sidebarMenu(disable = FALSE, collapsed = FALSE,  style = "margin-top:500px",
radioButtons("units", "Units",
c("Metric" = "met",
"Imperial" = "imp")),
uiOutput("nodeOutput"),
uiOutput("node1Output"),
uiOutput("node2Output"),
selectInput("TimeFrame", "Time Frame", c("Current", "24 Hours", "7 Days")),
selectInput("Maps", "Map Color", map_list, selected = "Default"),
menuItem("Dashboards", icon = icon("dashboard"), startExpanded = FALSE,
menuSubItem("Node Map", tabName="map", icon = icon("map")),
#menuSubItem("Comparison", tabName="compare", icon = icon("dashboard")),
menuSubItem("Heat Map", tabName="heatmap", icon = icon("map")),
menuSubItem("Compare Nodes", tabName="compare2", icon = icon("dashboard")),
menuSubItem("Dark Sky test", tabName="darkskyT", icon = icon("dashboard")),
menuSubItem("OpenAQ test", tabName="openAQT", icon = icon("dashboard"))),
menuItem("Choose AoT Data", icon = icon("dashboard"), startExpanded = FALSE,
checkboxInput("NO2", "NO2", TRUE),
checkboxInput("OZONE", "OZONE", TRUE),
checkboxInput("CO", "CO", TRUE),
checkboxInput("H2S", "H2S", FALSE),
checkboxInput("SO2", "SO2", FALSE),
checkboxInput("PM10", "PM10", FALSE),
checkboxInput("PM25", "PM25", FALSE),
checkboxInput("TEMPERATURE", "TEMPERATURE", FALSE),
checkboxInput("HUMIDITY", "HUMIDITY", FALSE),
checkboxInput("INTENSITY", "INTENSITY", FALSE)),
menuItem("Choose Dark Sky Data", icon = icon("dashboard"), startExpanded = FALSE,
checkboxInput("TEMPERATURE_DS", "TEMPERATURE", FALSE),
checkboxInput("HUMIDITY_DS", "HUMIDITY", FALSE),
checkboxInput("WINDSPEED", "WIND SPEED", TRUE),
checkboxInput("WINDBEARING", "WIND BEARING", FALSE),
checkboxInput("CLOUDCOVER", "CLOUD COVER", TRUE),
checkboxInput("VISIBILITY", "VISIBILITY", FALSE),
checkboxInput("PRESSURE", "PRESSURE", FALSE),
checkboxInput("OZONE_DS", "OZONE", TRUE),
checkboxInput("SUMMARY", "SUMMARY", FALSE)
),
menuItem("Choose OpenAQ Data", icon = icon("dashboard"), startExpanded = FALSE,
checkboxInput("PM25_AQ", "PM25", FALSE),
checkboxInput("PM10_AQ", "PM10", FALSE),
checkboxInput("SO2_AQ", "SO2", FALSE),
checkboxInput("NO2_AQ", "NO2", TRUE),
checkboxInput("O3_AQ", "O3", TRUE),
checkboxInput("CO_AQ", "CO", TRUE),
checkboxInput("BC_AQ", "BC", TRUE)),
menuItem("Resources", tabName="resources", icon = icon("bullet"))
#temperature, humidity, wind speed, wind bearing, cloud cover, visibility, pressure, ozone, summary
)),
######################################## THE MAIN BODDY OF THE WEB APP ########################################
dashboardBody(
tabItems(
tabItem(
tabName = "map",
fluidRow(column(12,
leafletOutput("mymap", height = 1200)
)),
fluidRow(
column(12, h4(textOutput("Node Data")),
plotOutput("node_data")))
),
#   tabItem(
#     tabName = "compare",
#      fluidRow(
#        # column(6,h4(textOutput("Node 1")),
#     #
#     #        tabsetPanel(type = "tabs",
#     #          tabPanel("Current",plotOutput("node1_cur")),
#     #          tabPanel("24 Hours", plotOutput("node1_24")),
#     #          tabPanel("7 Days",tableOutput("node1_7")),
#     #          position = "below"
#     #        )
#     #      ),
#          column(6,h4(textOutput("Node 2")),
#                 tabsetPanel( type = "tabs",
#                   tabPanel("Current",plotOutput("node2_cur")),
#                   tabPanel("24 Hours", plotOutput("node2_24")),
#                   tabPanel("7 Days",plotOutput("node2_7")),
#                   position = "left"
#                 )
#          )
# )),
tabItem(
tabName = "resources",
h2("Resources used in this project:"),
h5("All data used is from here: ###########################3"),
h5("Base Code and Code influence from Professor Andy Johnson, https://www.evl.uic.edu/aej/424/ (week 2)"),
h6("librarys used: shiny, DT, AotClient, darksky, ropenaq, lubridate, tidyverse, dplyr, shinydashboard, leaflet, qdapTools, data.table, jsonlite, leaflet.extras, magrittr"),
h5("Techniques and methods adapted from:"),
h6("#####################################################3"),
h6("https://groups.google.com/forum/#!topic/shiny-discuss/ugNEaHizlck")
# h6("  *https://rstudio.github.io/shinydashboard/appearance.html"),
# h6("  *reshape and melt function from https://www.statmethods.net/management/reshape.html"),
# h6("  *https://stat.ethz.ch/R-manual/R-devel/library/base/html/toString.html"),
# h6("  *https://stat.ethz.ch/R-manual/R-devel/library/base/html/strsplit.html "),
# h6("  *https://stat.ethz.ch/R-manual/R-devel/library/base/html/sort.html"),
# h6("  *https://stackoverflow.com/questions/52544228/r-shiny-display-static-text-outside-sidebar-panel"),
# h6("  *https://stackoverflow.com/questions/12280571/how-can-i-remove-rows-containing-0-of-certain-columns-while-keeping-the-rows-i"),
# h6("  *https://www.rdocumentation.org/packages/ggplot2/versions/3.1.0/topics/position_stack"),
# h6("  *http://www.sthda.com/english/wiki/ggplot2-pie-chart-quick-start-guide-r-software-and-data-visualization"),
# h6("  *https://stackoverflow.com/questions/26869141/conditionally-hiding-data-labels-in-ggplot2-graph"),
# h6("  *https://www.displayr.com/how-to-make-a-pie-chart-in-r/"),
# h6("  *https://stackoverflow.com/questions/38126212/how-to-check-if-data-table-has-empty-rows"),
# h6("  *http://www.cookbook-r.com/Graphs/Bar_and_line_graphs_(ggplot2)/"),
# h6("  *https://rpubs.com/euclid/343644"),
# h6("  *http://shiny.rstudio.com/articles/shinyapps.html"),
# h6("  *https://shiny.rstudio.com/reference/shiny/0.14/updateSelectInput.html"),
# h6("  *https://gist.github.com/aagarw30/d08c5fb1794cf9b58fa38342db97b697"),
# h6("  *http://shiny.rstudio.com/articles/shinyapps.html"),
# h6("  *student who was in office hours on Friday - never got your name"),
# h6("  *http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/"),
# h6("  *https://stackoverflow.com/questions/33266157/how-to-add-more-whitespace-to-the-main-panel-in-shiny-dashboard"),
# h6("  *professor Andy Johnson")
),
tabItem(
tabName = "heatmap",
#
leafletOutput("heatmap", height = 1300),
# column(12,h4(textOutput("Heat Map")),
#        tabsetPanel( type = "tabs",
#                     tabPanel("Current",leafletOutput("map1")),
#                     tabPanel("24 Hours", leafletOutput("map24")),
#                     tabPanel("7 Days", leafletOutput("map7")),
#                     position = "left"
#        )
# )
box(title = "Map Data Selection", solidHeader = TRUE, status = "primary", radioButtons("units_heatmap", "Visualize:",
c("SO2" = "AOT_SO2_HM",
"H2S" = "AOT_H2S_HM",
"O3" = "AOT_O3_HM",
"NO2" = "AOT_NO2_HM",
"CO" = "AOT_CO_HM",
"PM25" = "AOT_PM25_HM",
"PM10" = "AOT_PM10_HM",
"AOT TEMPERATURE" = "AOT_TEMPERATURE_HM",
"AOT HUMIDITY" = "AOT_HUMIDITY_HM",
"LIGHT INTENSITY" = "AOT_LIGHT_INTENSITY_HM",
"DARK SKY TEMPERATURE" = "DS_TEMPERATURE_HM",
"DARK SKY HUMIDITY" = "DS_HUMIDITY_HM",
"WIND SPEED" = "DS_WIND_SPEED_HM",
"WIND BEARING" = "DS_WIND_BEARING_HM",
"CLOUD COVER" = "DS_CLOUD_COVER_HM",
"VISIBILITY" = "DS_VISIBILITY_HM",
"PRESSURE" = "DS_PRESSURE_HM",
"OZONE" = "DS_OZONE_HM",
"SUMMARY" = "DS_SUMMARY_HM"),
inline = TRUE
))
),
tabItem(
tabName = "compare2", fluidRow(
box(title = "Node 1", width= 12, plotOutput("node1_cur")),
box(title = "Node 2",width= 12, plotOutput("node2_cur")),
tabsetPanel( type = "tabs",
tabPanel("NO2",dataTableOutput("NO2_1")),
tabPanel("CO", dataTableOutput("CO_1")),
tabPanel("H2S", dataTableOutput("H2S_1")),
tabPanel("SO2", dataTableOutput("SO2_1") ),
tabPanel("PM10", dataTableOutput("PM10_1")),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
tabPanel("", ),
)
# box( title = "NODE 1 - TEMPERATURE", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("TEMPERATURE_1")),
# box( title = "NODE 1 - HUMIDITY", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("HUMIDITY_1")),
# box( title = "NODE 1 - INTENSITY", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("INTENSITY_1"))),
#
#
#         # box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 2, ),
#          box( title = "NODE 1 - OZONE", solidHeader = TRUE, status = "primary", width = 2,dataTableOutput("OZONE_1")),
#          box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 2,),
#          box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 2,dataTableOutput("H2S_1")),
#          box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 2, ),
#          box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 1, ),
#          box( title = "NODE 1 - ", solidHeader = TRUE, status = "primary",width = 1, dataTableOutput("PM25_1"))
#          ),
#
# fluidRow(h4(textOutput("Node 2")),
#
# box( title = "NODE 2 - TEMPERATURE", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("TEMPERATURE_2")),
# box( title = "NODE 2 - HUMIDITY", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("HUMIDITY_2")),
# box( title = "NODE 2 - INTENSITY", solidHeader = TRUE, status = "primary",width = 2, dataTableOutput("INTENSITY_2"))
# ),
# fluidRow(
#          box( title = "NODE 2 - NO2", solidHeader = TRUE, status = "primary" ,width = 2, dataTableOutput("NO2_2")),
#          box( title = "NODE 2 - OZONE", solidHeader = TRUE, status = "primary", width = 2,dataTableOutput("OZONE_2")),
#          box( title = "NODE 2 - CO", solidHeader = TRUE, status = "primary", width = 2,dataTableOutput("CO_2")),
#          box( title = "NODE 2 - H2S", solidHeader = TRUE, status = "primary", width = 2,dataTableOutput("H2S_2")),
#          box( title = "NODE 2 - SO2", solidHeader = TRUE, status = "primary", width = 2,dataTableOutput("SO2_2")),
#          box( title = "NODE 2 - PM10", solidHeader = TRUE, status = "primary", width = 1,dataTableOutput("PM10_2")),
#          box( title = "NODE 2 - PM25", solidHeader = TRUE, status = "primary", width = 1,dataTableOutput("PM25_2"))
)
),
################# Dark Sky ######################
tabItem(
tabName = "darkskyT",
verbatimTextOutput("TEMPERATURE_DS"),
verbatimTextOutput("HUMIDITY_DS"),
verbatimTextOutput("WINDSPEED"),
verbatimTextOutput("WINDBEARING"),
verbatimTextOutput("CLOUDCOVER"),
verbatimTextOutput("VISIBILITY"),
verbatimTextOutput("PRESSURE"),
verbatimTextOutput("OZONE_DS"),
verbatimTextOutput("SUMMARY")
),
tabItem(
tabName = "openAQT",
verbatimTextOutput("PM25_AQ"),
verbatimTextOutput("PM10_AQ"),
verbatimTextOutput("SO2_AQ"),
verbatimTextOutput("NO2_AQ"),
verbatimTextOutput("O3_AQ"),
verbatimTextOutput("CO_AQ"),
verbatimTextOutput("BC_AQ")
)
)
))
ui <- fluidPage(
mainPanel(
radioButtons("myfilter", choices = c("interactive", "static"), label = "Display Format",inline = TRUE),
uiOutput("contents")
)
)
output$contents <- renderUI({
if(input$myfilter == "interactive"){
radioButtons("myfilter3", choices = c("interactive", "static"), label = "Display Format")
} else {
radioButtons("myfilter2", choices = c("one", "two"), label = "Display Format")
}
})
runApp('C:/Users/nflbu/Desktop/tester_App')
shiny::runApp()
runApp()
